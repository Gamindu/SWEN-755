package edu.rit.swen755.client;

import edu.rit.swen755.communication.SubmissionMessage;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Joanna
 */
public class TCPConnection {

    private final String hostname;
    private final int port;

    /**
     *
     * @param hostname name of server host
     * @param port port in which the server is listening
     */
    public TCPConnection(String hostname, int port) {
        this.hostname = hostname;
        this.port = port;
    }

    /**
     * Send submission message to the server.
     *
     * @param message submission data to be sent to the server
     * @return submission id generated by the server
     * @throws IOException
     */
    private String sendMessage(SubmissionMessage message) throws IOException {
        Socket connection = new Socket(hostname, port);
        connection.setKeepAlive(true);

        ObjectOutputStream outStream = new ObjectOutputStream(connection.getOutputStream());
        outStream.writeObject(message);
        DataInputStream inStream = new DataInputStream(connection.getInputStream());
        String sid = inStream.readUTF();
        connection.close();
        return sid;
    }

    /**
     * Attempts to retrieve the feedback from the submission.
     *
     * @param sid submission id
     * @return String with the submission's feedback
     * @throws IOException if there was an error when reading from the server.
     */
    private String getFeedback(String sid) throws IOException {
        Socket connection = new Socket(hostname, port);
        connection.setKeepAlive(true);

        ObjectOutputStream outStream = new ObjectOutputStream(connection.getOutputStream());
        outStream.writeObject(new SubmissionMessage(Integer.parseInt(sid)));

        DataInputStream inStream = new DataInputStream(connection.getInputStream());
        String feedback = inStream.readUTF();
        connection.close();
        return feedback;
    }

    /**
     * Send a submission to the server.
     *
     * @param fileName file name
     * @param problemId id of the problem
     * @param teamId id of the team
     * @return feedback response
     * @throws IOException
     */
    public String send(String fileName, int problemId, int teamId) throws IOException {
        // first send submission to the server and get its  id
        String sid = sendMessage(new SubmissionMessage(fileName, teamId, problemId));

        System.out.println("[CLIENT] Submission " + sid + " was received by the server");
        // keeps pooling the server with the submissionId to get a feedback
        int maxNumberAttempts = 12;
        for (int i = 0; i < maxNumberAttempts; i++) {
            try {
                String feedback = getFeedback(sid);
                if (feedback != null && !feedback.isEmpty()) {
                    return feedback;
                }
                Thread.sleep(5000);
            } catch (InterruptedException ex) {
                System.out.println(ex.getClass().getName() + ": " + ex.getMessage());
            } catch(IOException ex){
                System.out.println(ex.getClass().getName() + ": " + ex.getMessage());
            }
        }
        // if we reach this statement, then server was not able to provide a timely response
        throw new IOException("Server did not provide feedback after " + maxNumberAttempts + " attempts");

    }
//    public String send(String fileName, int problemId, int teamId) throws IOException {
//        Socket connection = new Socket(hostname, port);
//        connection.setKeepAlive(true);
//
//        ObjectOutputStream outStream = new ObjectOutputStream(connection.getOutputStream());
//        outStream.writeObject(new SubmissionMessage(fileName, teamId, problemId));
//        DataInputStream inStream = new DataInputStream(connection.getInputStream());
//        String feedback = inStream.readUTF();
//        connection.close();
//        return feedback;
//    }
}
