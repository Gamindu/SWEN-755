package edu.rit.swen755.judge;

import edu.rit.swen755.communication.SubmissionMessage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 *
 * @author Joanna
 */
public class Checkpoint {

    private Connection connection;

    public Checkpoint() {
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:judge.db");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(-1);
        } catch (SQLException e) {
            System.out.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(-1);
        }
    }

    public int save(SubmissionMessage message) {
        int generatedId = 0;
        try {
            String sql = "INSERT INTO submission(filename, team_id, problem_id) VALUES(?,?,?)";
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, message.getFileName());
            ps.setInt(2, message.getTeamId());
            ps.setInt(3, message.getProblemId());
            int affectedRows = ps.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Could not save checkpoint data");
            }
            ResultSet rs = ps.getGeneratedKeys();
            if (!rs.next()) {
                throw new SQLException("Could not get id generated for submission");
            }
            generatedId = rs.getInt(1);
        } catch (SQLException e) {
            System.out.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(-1);
        }

        message.setId(generatedId);
        System.out.println("Checkpointed new submission " + message);
        return generatedId;
    }

    public void update(int sid, String feedback) {
        try {
            PreparedStatement ps = connection.prepareStatement("UPDATE submission set feedback = ? WHERE id = ? ");
            ps.setString(1, feedback);
            ps.setInt(2, sid);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(-1);
        }

        System.out.println("Checkpointed updated submission {id=" + sid + ", feedback= " + feedback + "}");
    }

    /**
     * Response generated by the CodeEvaluator
     *
     * @param sid the submission id
     * @return the feedback given by the CodeEvaluator. If the code was not
     * executed yet, then an empty string is returned
     */
    public String getFeedback(int sid) {
        String response = "";
        try {
            String sql = "SELECT feedback FROM submission WHERE id = ?";
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setInt(1, sid);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                response = rs.getString(1) != null ? rs.getString(1) : "";
            }
        } catch (SQLException e) {
            System.out.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(-1);
        }
        return response;
    }

    /**
     * Retrieves from log data the submissions uncompleted.
     *
     * @return a queue of submissions that have not completed yet
     */
    public ConcurrentLinkedQueue<SubmissionMessage> rollback() {
        ConcurrentLinkedQueue<SubmissionMessage> queue = new ConcurrentLinkedQueue<SubmissionMessage>();
        try {
            String sql = "SELECT * FROM submission WHERE feedback IS NULL ORDER BY id ";
            PreparedStatement ps = connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {

                SubmissionMessage message = new SubmissionMessage(rs.getInt("id"),
                        rs.getString("filename"),
                        rs.getInt("team_id"),
                        rs.getInt("problem_id")
                );

                queue.add(message);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(-1);
        }
        return queue;
    }
}
